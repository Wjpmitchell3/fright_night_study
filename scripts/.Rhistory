# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
influence.ME,
lattice,
lme4,
performance,
sjPlot,
stargazer,
tidyverse)
# Loading a custom function that will clean NA values from dataframes
source("https://github.com/Wjpmitchell3/stinkR/blob/main/remove_NAs.R?raw=TRUE", local = T)
# Loading a custom function that will just make building blanke dataframes simpler
source("https://github.com/Wjpmitchell3/stinkR/blob/main/make_df.R?raw=TRUE", local = T)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_02/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df <- read.csv(file = paste0(Import, "df.csv"),
header = T,
sep=",",
row.names = 1,
stringsAsFactors = F,
na.strings=c("","NA", "N/A"))
df_all <- df
df <- df %>%
subset(!is.na(df$EmoMod) &
df$EmoMod != "" &
!is.na(df$PID))
df$Distracted <- NA
df$Distracted_cat <- NA
df$Distracted[df$Attention.Deployment == 1 & df$Response.Modulation == 0 & df$Reappraisal == 0] <- 1
df$Distracted_cat[df$Attention.Deployment == 1 & df$Response.Modulation == 0 & df$Reappraisal == 0] <- "Distracted"
df$Distracted[df$Attention.Deployment == 0 & df$Response.Modulation == 0 & df$Reappraisal == 1] <- 0
df$Distracted_cat[df$Attention.Deployment == 0 & df$Response.Modulation == 0 & df$Reappraisal == 1] <- "Reappraised"
df$Intense.z <- as.numeric(df$Intense.z)
df$CogLoad_Post <- as.numeric(df$CogLoad_Post)
df$Intense.pmean.z <- as.numeric(df$Intense.pmean.z)
df <- subset(df, df$Reg == "Decrease" & !is.na(df$Distracted) & df$Valence <= 0.5)
paste("Number of Participants:", length(unique(df$PID)))
paste("Number of Events:", nrow(distinct(subset(df, select = c("PID", "Timing", "EventNum")))))
paste("Number of Immediate Events:", nrow(distinct(subset(df, df$Timing == "ImmReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Familiar Recall Events:", nrow(distinct(subset(df, df$Timing == "MemReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Novel Recall Events:", nrow(distinct(subset(df, df$Timing == "DelReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Distracted cases:", length(which(df$Distracted == 1)))
paste("Number of Reappraised cases:", length(which(df$Distracted == 0)))
aov(Intense.z ~ Timing, data = df) %>%
summary()
t.test(df$Intense.z[df$Timing == "ImmReg"],
df$Intense.z[df$Timing == "MemReg"],
alternative = "two.sided",
paired = F)
0.236-0.137
df$Timing <- factor(df$Timing, levels = c("ImmReg", "MemReg", "DelReg"))
plot <- ggplot(data = df, aes(x = Timing, y = Intense.z)) +
geom_jitter(aes(alpha=0.5, color=Timing), width = 0.15, height = 0.025, size = 3.5, position=position_jitter(0.2)) +
scale_x_discrete(name = "Reporting Stages", labels = c("Immediate Reporting", "Delayed Recall", "Delayed Reporting")) +
scale_y_continuous(name = "Emotion Intensity (z)", breaks = c(-2:2)) +
coord_cartesian(ylim=c(-2.25,2.25)) +
geom_boxplot(width=0.2, color="black", alpha=0.0) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black",angle=-45, vjust = 1, hjust = 0.0)) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
df$Timing <- factor(df$Timing, levels = c("ImmReg", "MemReg", "DelReg"))
plot <- ggplot(data = df, aes(x = Timing, y = Intense.z)) +
geom_jitter(aes(alpha=0.5, color=Timing), height = 0.025, size = 3.5, position=position_jitter(0.2)) +
scale_x_discrete(name = "Reporting Stages", labels = c("Immediate Reporting", "Delayed Recall", "Delayed Reporting")) +
scale_y_continuous(name = "Emotion Intensity (z)", breaks = c(-2:2)) +
coord_cartesian(ylim=c(-2.25,2.25)) +
geom_boxplot(width=0.2, color="black", alpha=0.0) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black",angle=-45, vjust = 1, hjust = 0.0)) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
df$Timing <- factor(df$Timing, levels = c("ImmReg", "MemReg", "DelReg"))
plot <- ggplot(data = df, aes(x = Timing, y = Intense.z)) +
geom_jitter(aes(alpha=0.5, color=Timing), size = 3.5, position=position_jitter(0.2)) +
scale_x_discrete(name = "Reporting Stages", labels = c("Immediate Reporting", "Delayed Recall", "Delayed Reporting")) +
scale_y_continuous(name = "Emotion Intensity (z)", breaks = c(-2:2)) +
coord_cartesian(ylim=c(-2.25,2.25)) +
geom_boxplot(width=0.2, color="black", alpha=0.0) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black",angle=-45, vjust = 1, hjust = 0.0)) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
plot
tiff(paste0(Plots, "Fig99.tiff"),
res = 300,
units = "in",
width = 12,
height = 9)
plot
dev.off()
rm(plot, m0,m1,m2,m3,m4,m5,m1.e)
# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
influence.ME,
lattice,
lme4,
performance,
sjPlot,
stargazer,
tidyverse)
# Loading a custom function that will clean NA values from dataframes
source("https://github.com/Wjpmitchell3/stinkR/blob/main/remove_NAs.R?raw=TRUE", local = T)
# Loading a custom function that will just make building blanke dataframes simpler
source("https://github.com/Wjpmitchell3/stinkR/blob/main/make_df.R?raw=TRUE", local = T)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_02/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df <- read.csv(file = paste0(Import, "df.csv"),
header = T,
sep=",",
row.names = 1,
stringsAsFactors = F,
na.strings=c("","NA", "N/A"))
df_all <- df
df <- df %>%
subset(!is.na(df$EmoMod) &
df$EmoMod != "" &
!is.na(df$PID))
df$Distracted <- NA
df$Distracted_cat <- NA
df$Distracted[df$Attention.Deployment == 1 & df$Response.Modulation == 0 & df$Reappraisal == 0] <- 1
df$Distracted_cat[df$Attention.Deployment == 1 & df$Response.Modulation == 0 & df$Reappraisal == 0] <- "Distracted"
df$Distracted[df$Attention.Deployment == 0 & df$Response.Modulation == 0 & df$Reappraisal == 1] <- 0
df$Distracted_cat[df$Attention.Deployment == 0 & df$Response.Modulation == 0 & df$Reappraisal == 1] <- "Reappraised"
df$Intense.z <- as.numeric(df$Intense.z)
df$CogLoad_Post <- as.numeric(df$CogLoad_Post)
df$Intense.pmean.z <- as.numeric(df$Intense.pmean.z)
df <- subset(df, df$Reg == "Decrease" & !is.na(df$Distracted) & df$Valence <= 0.5)
paste("Number of Participants:", length(unique(df$PID)))
paste("Number of Events:", nrow(distinct(subset(df, select = c("PID", "Timing", "EventNum")))))
paste("Number of Immediate Events:", nrow(distinct(subset(df, df$Timing == "ImmReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Familiar Recall Events:", nrow(distinct(subset(df, df$Timing == "MemReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Novel Recall Events:", nrow(distinct(subset(df, df$Timing == "DelReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Distracted cases:", length(which(df$Distracted == 1)))
paste("Number of Reappraised cases:", length(which(df$Distracted == 0)))
aov(Intense.z ~ Timing, data = df) %>%
summary()
t.test(df$Intense.z[df$Timing == "ImmReg"],
df$Intense.z[df$Timing == "MemReg"],
alternative = "two.sided",
paired = F)
t.test(df$Intense.z[df$Timing == "ImmReg"],
df$Intense.z[df$Timing == "DelReg"],
alternative = "two.sided",
paired = F)
df$Timing <- factor(df$Timing, levels = c("ImmReg", "MemReg", "DelReg"))
ggplot(data = df, aes(x = Timing, y = Intense.z)) +
theme_classic()+
geom_jitter(aes(alpha=0.5, color=Timing),shape=16, position=position_jitter(0.2)) +
geom_violin(trim=T, alpha=0.25) +
labs(title = "Time Influenced Emotional Intensity",
subtitle = paste("Events reported immediately after exposure were more intense than novel events recalled one week later, and the same events reacalled one week later.\n No differences were observed between novel and familiar recalled events."),
x = NULL,
y ="Emotion Intensity") +
scale_y_continuous(breaks = c(-2:2)) +
coord_cartesian(ylim=c(-2.25,2.25)) +
theme(legend.position="none") +
geom_boxplot(width=0.2, color="black", alpha=0.0) +
theme(plot.title = element_text(face="bold", size=8, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 6, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 10, color = "Black", angle=-45, vjust = 1, hjust = 0.0)) +
theme(axis.text.y = element_text(size = 12, color = "Black"))
t.test(df$Intense.z[df$Timing == "MemReg"],
df$Intense.z[df$Timing == "DelReg"],
alternative = "two.sided",
paired = F)
chisq.test(x = df$Timing, y= df$Distracted_cat)
ggplot(data = df, aes(x = Timing, color = Distracted_cat, fill = Distracted_cat)) +
geom_bar() +
scale_x_discrete("Timepoint", breaks = c("Immediate Recall", "Familiar Recall", "Novel Recall")) +
scale_y_continuous(breaks = c(0,100,200)) +
labs(title = "Frequency of Strategy Usage by Time Reported",
subtitle = "Strategies were reported equally as frequently across timepoints",
x = NULL,
y ="Frequency") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Set2") +
coord_cartesian(ylim=c(0.0, 200.0)) +
theme_classic() +
theme(plot.title = element_text(face="bold", size=8, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 10)) +
theme(axis.text.x = element_text(size = 14, color = "Black")) +
theme(axis.text.y = element_text(size = 12, color = "Black")) +
theme(legend.key.size = unit(0.5, 'cm')) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6))
df_mem <- subset(df, df$Timing == "MemReg", select = c("PID", "EventNum", "EmoMod", "Intense","Intense.z", "Valence", "Valence_z",
"Reg", "RegDesc", "RegSuccess", "RegSuccess.z", "EmoCat", "Distracted"))
df_imm <- subset(df, df$Timing == "ImmReg", select = c("PID", "EventNum","EmoMod", "Intense", "Intense.z", "Valence", "Valence_z",
"Reg", "RegDesc", "RegSuccess", "RegSuccess.z", "EmoCat", "Distracted"))
paste(df_mem$PID, df_mem$EventNum) %>%
unique() %>%
sort() %>%
length()
paste(df_imm$PID, df_imm$EventNum) %>%
unique() %>%
sort() %>%
length()
tracker = 0
for (j in unique(paste(df_mem$PID, df_mem$EventNum))){
if (!any(paste(df_imm$PID, df_imm$EventNum) == j)){
# print(j)
tracker = tracker + 1
}
}
paste("Number of Events Without Comparison:", tracker)
df_compare <- merge(x = df_mem,
y = df_imm,
by = c("PID", "EventNum", "EmoMod", "Valence_z"),
all = FALSE)
Events_recalled <- paste(df_compare$PID, df_compare$EventNum) %>%
unique() %>%
sort() %>%
length()
paste("Number of Recalled Events:", Events_recalled)
df_compare$PID %>%
unique() %>%
sort() %>%
length() %>%
paste("Number of Participants:", ., "| Percentage:", round(((./115)*100),2), "%")
t.test(x = df_compare$Intense.z.x,
y = df_compare$Intense.z.y,
alternative = "two.sided",
paired = T)
df_compare$Intense.z_absdiff <- abs(df_compare$Intense.z.y - df_compare$Intense.z.x)
t.test(x = df_compare$Intense.z_absdiff,
alternative = "two.sided",
mu = 0)
df_compare$Congruent <- 0
df_compare$Congruent[df_compare$Distracted.x == df_compare$Distracted.y] <- 1
paste("Number of Congruent Observations:", sum(df_compare$Congruent), "| Percentage:", round(((sum(df_compare$Congruent)/nrow(df_compare))*100),2), "%")
df_compare <- merge(x = df_mem,
y = df_imm,
by = c("PID", "EventNum", "EmoMod", "Valence_z"),
all = TRUE)
Events_total <- paste(df_compare$PID, df_compare$EventNum) %>%
unique() %>%
sort() %>%
length()
paste("Number of Total Events:", Events_total)
((Events_recalled / Events_total) * 100) %>%
round(2) %>%
paste("Percent Events With An Emotion Recalled:", .,"%")
df_compare <- merge(x = df_mem,
y = df_imm,
by = c("PID", "EventNum", "EmoCat"),
all = FALSE)
Events_recalled <- paste(df_compare$PID, df_compare$EventNum) %>%
unique() %>%
sort() %>%
length()
paste("Number of Recalled Events:", Events_recalled)
df_compare$PID%>%
unique() %>%
sort() %>%
length() %>%
paste("Number of Participants:", ., "| Percentage:", round(((./115)*100),2), "%")
t.test(x = df_compare$Intense.z.x,
y = df_compare$Intense.z.y,
alternative = "two.sided",
paired = T)
df_compare$Intense.z_absdiff <- abs(df_compare$Intense.z.y - df_compare$Intense.z.x)
t.test(x = df_compare$Intense.z_absdiff,
alternative = "two.sided",
mu = 0)
df_compare$Congruent <- 0
df_compare$Congruent[df_compare$Distracted.x == df_compare$Distracted.y] <- 1
paste("Number of Congruent Observations:", sum(df_compare$Congruent), "| Percentage:", round(((sum(df_compare$Congruent)/nrow(df_compare))*100),2), "%")
((Events_recalled / Events_total) * 100) %>%
round(2) %>%
paste("Percent Events With An Emotion Recalled:", .,"%")
rm(j,df_compare,Events_recalled,df_imm, df_mem, tracker, Events_total)
df_pl <- data.frame("PID" = unique(df$PID),
"PropDist" = NA)
df_pl <- subset(df,
!is.na(df$HH.Enjoy) ,
select = c("PID", names(df)[grep(names(df), pattern = "Motive")],
"Pos.Anticipate", "Neg.Anticipate", "CogLoad_Post",
"Fear.Before", "Fear.During", "Intense.pmean.z", "Fear.Enjoy", "HH.Enjoy")) %>%
distinct() %>%
merge(x = df_pl,
y = .,
by = "PID",
all.x = F)
for (i in 1:nrow(df_pl)){
total <- nrow(subset(df, df$PID == df_pl$PID[i]))
dist <- nrow(subset(df, df$PID == df_pl$PID[i] & df$Distracted == 1))
if (total > 0) {
df_pl$PropDist[i] <- dist/total
}
}
rm(i, total, dist)
summary(lm(PropDist ~ CogLoad_Post, data = df_pl))
summary(lm(PropDist ~ Intense.pmean.z + CogLoad_Post, data = df_pl))
summary(lm(PropDist ~ Pos.Anticipate + Neg.Anticipate + Fear.Before, data = df_pl))
for (i in grep(names(df_pl), pattern = "Motive")){
df_pl[,i] <- as.numeric(df_pl[,i])
}
summary(lm(PropDist ~ Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored, data = df_pl))
summary(lm(PropDist ~ HH.Enjoy + Fear.Enjoy + Fear.During, data = df_pl))
summary(lm(PropDist ~ HH.Enjoy + Fear.Enjoy * Fear.During, data = df_pl))
names(df)
m1 <- glmer(Distracted ~ Intense.z + Timing + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + CogLoad_Post + Startle + Pos.Anticipate + Neg.Anticipate + Fear.Enjoy + STAI_State + STAI_Trait + ERQ_CogReap + Age + BDI_Total + Gender + Education.Years + (1 | PID), data = df, family = binomial)
m2 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Timing + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + CogLoad_Post + Startle + Pos.Anticipate + Neg.Anticipate + Fear.Enjoy + STAI_State + STAI_Trait + ERQ_CogReap + Age + BDI_Total + Gender + Education.Years + (1 | PID), data = df, family = binomial)
m01 <- glmer(Distracted ~ Intense.z + Timing + (1 | PID), data = df, family = binomial)
m02 <- glmer(Distracted ~ Intense.z + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + (1 | PID), data = df, family = binomial)
m03 <- glmer(Distracted ~ Intense.z + CogLoad_Post + (1 | PID), data = df, family = binomial)
m04 <- glmer(Distracted ~ Intense.z + Startle + Fear.Enjoy + (1 | PID), data = df, family = binomial)
m05 <- glmer(Distracted ~ Intense.z + Pos.Anticipate + Neg.Anticipate + (1 | PID), data = df, family = binomial)
m06 <- glmer(Distracted ~ Intense.z + STAI_State + STAI_Trait + (1 | PID), data = df, family = binomial)
m07 <- glmer(Distracted ~ Intense.z + ERQ_CogReap + (1 | PID), data = df, family = binomial)
m08 <- glmer(Distracted ~ Intense.z + BDI_Total + (1 | PID), data = df, family = binomial)
m09 <- glmer(Distracted ~ Intense.z + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
m10 <- glmer(Distracted ~ Intense.z + Timing + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + CogLoad_Post + Startle + Pos.Anticipate + Neg.Anticipate + Fear.Enjoy + STAI_State + STAI_Trait + ERQ_CogReap + Age + BDI_Total + Gender + Education.Years + (1 | PID), data = df, family = binomial)
stargazer(m01,m02,m03,m04,m05,m06,m07,m08,m09,m10, type = "text")
m01 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Timing + (1 | PID), data = df, family = binomial)
m02 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + (1 | PID), data = df, family = binomial)
m03 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + CogLoad_Post + (1 | PID), data = df, family = binomial)
m04 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Startle + Fear.Enjoy + (1 | PID), data = df, family = binomial)
m05 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Pos.Anticipate + Neg.Anticipate + (1 | PID), data = df, family = binomial)
m06 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + STAI_State + STAI_Trait + (1 | PID), data = df, family = binomial)
m07 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + ERQ_CogReap + (1 | PID), data = df, family = binomial)
m08 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
m09 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Timing + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + CogLoad_Post + Startle + Pos.Anticipate + Neg.Anticipate + Fear.Enjoy + STAI_State + STAI_Trait + ERQ_CogReap + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
stargazer(m01,m02,m03,m04,m05,m06,m07,m08,m09, type = "text")
