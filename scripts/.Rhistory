y = paste0("Regulation Effort (z)\n(",
"mean = ",
round(mean(df$Reg.Extent, na.rm = T),1),
"; sd = ",
round(sd(df$Reg.Extent, na.rm = T),1),
" )")) +
coord_cartesian(xlim=c(-2.5,2.5), ylim=c(-2, 2)) +
theme_classic() +
theme(legend.position="none") +
theme(plot.title = element_text(face="bold", size=13, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 16)) +
theme(axis.text.x = element_text(size = 14, color = "Black")) +
theme(axis.text.y = element_text(size = 14, color = "Black"))
plot
tiff(paste0(Plots, "Fig2.tiff"),
res = 300,
units = "in",
width = 12,
height = 9)
plot
dev.off()
rm(plot)
rows <- sort(unique(df$PID))
cols <- c("PID", "Percent.Reapp", "ERQ_Reapp")
df.pl <- data.frame(matrix(NA,
nrow = length(rows),
ncol = length(cols),
dimnames = list(rows, cols)))
rm(cols)
df.pl$PID <- rows
for (i in rows){
df.pl$ERQ_CogReapp[df.pl$PID == i] <- df$ERQ_CogReapp[df$PID == i][1]
}
rm(i)
df_temp <- subset(df,
select = c("PID", "Event.ID", "Reappraisal")) %>%
distinct()
for (i in rows){
df.pl$Percent.Reapp[df.pl$PID == i] <- sum(df_temp$Reappraisal[df_temp$PID == i])/length(unique(df_temp$Event.ID))
}
rm(df_temp,i)
m1 <- lm(Percent.Reapp ~ ERQ_CogReapp, data = df.pl)
stargazer(m1,type = "text")
rm(m1)
m0 <- glmer(Attention.Deployment ~ 1 + (1 | PID), data = df, family = binomial)
icc(m0)
m1 <- glmer(Attention.Deployment ~ Emo.Extent.z + (1 | PID), data = df, family = binomial)
m2 <- glmer(Attention.Deployment ~ Emo.Extent.pc.z + Emo.Extent.pmean.z + (1 | PID), data = df, family = binomial)
m3 <- glmer(Attention.Deployment ~ Emo.Extent.pc.z + Emo.Extent.pmean.z + Gender +
IUS_Factor2 + STAI_State + STAI_Trait + (1 | PID), data = df, family = binomial)
anova(m0, m1)
anova(m1, m2)
anova(m2, m3)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
stargazer(m0,m1,m2,m3,
type = "text",
title= "Affect Predicting Regulation Usage",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3"),
dep.var.labels = "Strategy Usage",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)","Affective Intensity (Person-Centered, z)", "Affective Intensity (Person-Mean)", "Gender",
"IUS, Factor 2", "STAI, State", "STAI, Trait", "Intercept"), ci = T,
notes = "")
exp(fixef(m1))
m1.e <- effect("Emo.Extent.z",m1,xlevels=list(Emo.Extent.z=seq(range(df$Emo.Extent.z)[1],
range(df$Emo.Extent.z)[2],
0.01)))
m1.e <-as.data.frame(m1.e)
head(m1.e)
plot <- ggplot(m1.e, aes(x=Emo.Extent.z, y=fit)) +
geom_jitter(data = df, aes(x=Emo.Extent.z, y=Attention.Deployment,
color = as.factor(Attention.Deployment)),
width = 0.15, height = 0.025, size = 3.5) +
geom_line(color = "Black", size = 4.5) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha = 0.15) +
scale_x_continuous("Emotion Intensity (z)", breaks = round(seq(range(df$Emo.Extent.z)[1],
range(df$Emo.Extent.z)[2],
(range(df$Emo.Extent.z)[2] - range(df$Emo.Extent.z)[1])/6),0)) +
scale_y_continuous("Probability of Using Distraction", breaks = seq(0,1,0.20)) +
coord_cartesian(xlim = c(range(df$Emo.Extent.z)[1],
range(df$Emo.Extent.z)[2]), ylim = c(0,1)) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black")) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
plot
tiff(paste0(Plots,"Fig3.tiff"),
res = 300,
units = "in",
width = 12,
height = 9)
plot
dev.off()
rm(plot)
diff_optims <- lme4::allFit(m1)
diff_optims_OK <- diff_optims[sapply(diff_optims, is, "merMod")]
lapply(diff_optims_OK, function(x) x@optinfo$conv$lme4$messages)
convergence_results <- lapply(diff_optims_OK, function(x) x@optinfo$conv$lme4$messages)
working_indices <- sapply(convergence_results, is.null)
if(sum(working_indices) == 0){
print("No algorithms from allFit converged. You may still be able to use the results, but proceed with extreme caution.")
first_fit <- NULL
} else {
first_fit <- diff_optims[working_indices][[1]]
}
first_fit
m1_extended <- simr::extend(m1,
along = "PID",
n = 80)
simr::powerCurve(m1_extended,
along = "PID",
breaks = c(70,72,74,76,78,80),
nsim = 1000,
seed = 12345)
df_temp <- subset(df, select = c("PID", "Event_chronolorder")) %>%
distinct()
df_temp$Emo_Sum <- NA
df_temp$Emo_Mean <- NA
df_temp$Emo_Sum.z <- NA
df_temp$Emo_Mean.z <- NA
df_temp$Emo_Sum_pc.z <- NA
df_temp$Emo_Mean_pc.z <- NA
df_temp$Emo_Sum_pmean.z <- NA
df_temp$Emo_Mean_pmean.z <- NA
df_temp$Attention.Deployment <- NA
df_temp$Gender <- NA
df_temp$IUS_Factor2 <- NA
df_temp$STAI_State <- NA
df_temp$STAI_Trait <- NA
for (i in 1:nrow(df_temp)){
df_temp$Emo_Sum[i] <- sum(df$Emo.Extent[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Sum.z[i] <- sum(df$Emo.Extent.z[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Sum_pc.z[i] <- sum(df$Emo.Extent.pc.z[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Sum_pmean.z[i] <- sum(df$Emo.Extent.pmean.z[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Mean[i] <- mean(df$Emo.Extent[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Mean.z[i] <- mean(df$Emo.Extent.z[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Mean_pc.z[i] <- mean(df$Emo.Extent.pc.z[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Emo_Mean_pmean.z[i] <- mean(df$Emo.Extent.pmean.z[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]])
df_temp$Gender[i] <- df$Gender[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]][1]
df_temp$IUS_Factor2[i] <- df$IUS_Factor2[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]][1]
df_temp$STAI_State[i] <- df$STAI_State[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]][1]
df_temp$STAI_Trait[i] <- df$STAI_Trait[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]][1]
df_temp$Attention.Deployment[i] <- as.numeric(df$Attention.Deployment[df$PID == df_temp$PID[i] &
df$Event_chronolorder == df_temp$Event_chronolorder[i]][1])
}
write.csv(df_temp, paste0(Export,"df_subset_eventlevel.csv"))
m0 <- glmer(Attention.Deployment ~ 1 + (1 | PID), data = df_temp, family = binomial)
icc(m0)
m1 <- glmer(Attention.Deployment ~ Emo_Sum.z + (1 | PID), data = df_temp, family = binomial)
m2 <- glmer(Attention.Deployment ~ Emo_Sum_pc.z + Emo_Sum_pmean.z + (1 | PID), data = df_temp, family = binomial)
m3 <- glmer(Attention.Deployment ~ Emo_Sum_pc.z + Emo_Sum_pmean.z + Gender +
IUS_Factor2 + STAI_State + STAI_Trait + (1 | PID), data = df_temp, family = binomial)
anova(m0, m1)
anova(m1, m2)
anova(m2, m3)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
stargazer(m0,m1,m2,m3,
type = "text",
title= "Affect Predicting Regulation Usage",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3"),
dep.var.labels = "Strategy Usage",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Affective Intensity (Person-Centered, z)", "Affective Intensity (Person-Mean)", "Gender",
"IUS, Factor 2", "STAI, State", "STAI, Trait", "Intercept"),
notes = "")
exp(fixef(m1))
# exp(confint(m1))
m1.e <- effect("Emo_Sum.z",m1,xlevels=list(Emo_Sum.z=seq(range(df_temp$Emo_Sum.z)[1],
range(df_temp$Emo_Sum.z)[2],
0.01)))
m1.e <-as.data.frame(m1.e)
head(m1.e)
plot <- ggplot(m1.e, aes(x=Emo_Sum.z, y=fit)) +
geom_jitter(data = df_temp, aes(x=Emo_Sum.z, y=Attention.Deployment,
color = as.factor(Attention.Deployment)),
width = 0.2, height = 0.025, size = 1) +
geom_line(color = "Black", size = 1.75) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha = 0.15) +
scale_x_continuous("Emotion Intensity (z)", breaks = round(seq(range(df_temp$Emo_Sum.z)[1],
range(df_temp$Emo_Sum.z)[2],
(range(df_temp$Emo_Sum.z)[2] - range(df_temp$Emo_Sum.z)[1])/6),0)) +
scale_y_continuous("Probability of Using Distraction", breaks = seq(0,1,0.20)) +
coord_cartesian(xlim = c(range(df_temp$Emo_Sum.z)[1],
range(df_temp$Emo_Sum.z)[2]), ylim = c(0,1)) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(size = 10, color = "Black")) +
theme(axis.text.y = element_text(size = 10, color = "Black"))
plot
m1 <- glmer(Attention.Deployment ~ Emo_Mean.z + (1 | PID), data = df_temp, family = binomial)
m2 <- glmer(Attention.Deployment ~ Emo_Mean_pc.z + Emo_Mean_pmean.z + (1 | PID), data = df_temp, family = binomial)
m3 <- glmer(Attention.Deployment ~ Emo_Mean_pc.z + Emo_Mean_pmean.z + Gender +
IUS_Factor2 + STAI_State + STAI_Trait + (1 | PID), data = df_temp, family = binomial)
anova(m0, m1)
anova(m1, m2)
anova(m2, m3)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
stargazer(m0,m1,m2,m3,
type = "text",
title= "Affect Predicting Regulation Usage",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3"),
dep.var.labels = "Strategy Usage",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Affective Intensity (Person-Centered, z)", "Affective Intensity (Person-Mean)", "Gender",
"IUS, Factor 2", "STAI, State", "STAI, Trait", "Intercept"),
notes = "")
exp(fixef(m1))
m1.e <- effect("Emo_Mean.z",m1,xlevels=list(Emo_Mean.z=seq(range(df_temp$Emo_Mean.z)[1],
range(df_temp$Emo_Mean.z)[2],
0.01)))
m1.e <-as.data.frame(m1.e)
head(m1.e)
plot <- ggplot(m1.e, aes(x=Emo_Mean.z, y=fit)) +
geom_jitter(data = df_temp, aes(x=Emo_Mean.z, y=Attention.Deployment,
color = as.factor(Attention.Deployment)),
width = 0.2, height = 0.025, size = 1) +
geom_line(color = "Black", size = 1.75) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha = 0.15) +
scale_x_continuous("Emotion Intensity (z)", breaks = round(seq(range(df_temp$Emo_Mean.z)[1],
range(df_temp$Emo_Mean.z)[2],
(range(df_temp$Emo_Mean.z)[2] - range(df_temp$Emo_Mean.z)[1])/6),0)) +
scale_y_continuous("Probability of Using Distraction", breaks = seq(0,1,0.20)) +
coord_cartesian(xlim = c(range(df_temp$Emo_Mean.z)[1],
range(df_temp$Emo_Mean.z)[2]), ylim = c(0,1)) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 9, color = "Black")) +
theme(axis.text.x = element_text(size = 10, color = "Black")) +
theme(axis.text.y = element_text(size = 10, color = "Black", hjust = 0.5))
plot
m1.e <- effect("Emo.Extent.z",m1,xlevels=list(Emo.Extent.z=seq(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2],
0.01)))
m1 <- glmer(Strategy.FU ~ Emo.Extent.z + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
lme4,
performance,
psych,
stargazer,
tidyverse)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_02/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df.og <- read.csv(file = paste0(WorkDir, "/data/Pilot/Deriv/df_subset.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","NA", "N/A"),
row.names = 1)
paste("Observations:", nrow(df.og))
paste("Unique Events:", nrow(unique(df.og[,c('PID.OG', 'Event')])))
paste("Average Number of Emotions Per Event:", round(nrow(df.og)/nrow(unique(df.og[,c('PID.OG', 'Event')])),2))
paste("Total Number of Participants:", nrow(distinct(subset(df.og, select = c("PID.OG")))))
paste("Total Number of Reappraisal Events:", nrow(distinct(subset(df.og, df.og$Strategy.OG == "Reappraisal" , select = c("Strategy.OG", "Event")))))
paste("Total Number of Distraction Events:", nrow(distinct(subset(df.og, df.og$Strategy.OG== "Distraction" ,select = c("Strategy.OG", "Event")))))
df.fu <- read.csv(file = paste0(Import, "df.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("", "NA", "N/A"),
row.names = 1)
df.fu.pl <- read.csv(file = paste0(Import, "df_personlevel.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","N/A", "NA", "NaN"),
row.names = 1)
df.fu <- subset(df.fu,
!is.na(df.fu$PID.FU))
df.fu.pl$group <- "Participants"
ggplot(data = df.fu.pl, aes(x = group, y = DERS.LimitAccess.FU)) +
theme_classic()+
labs(x ="") +
geom_jitter(aes(alpha=0.2, color = group),shape=16, position=position_jitter(0.2)) +
geom_violin(trim=F, alpha=0.5) +
ylab("DERS - Limited Access to ER Strategies Subscale") +
theme(legend.position="none") +
geom_boxplot(width=0.2, color="black", alpha=0.2)
df.og.pl <- subset(df.og, select= c("PID.OG", "ERQ_Reapp.OG", "ERQ_Supp.OG", "IUS.OG")) %>%
distinct()
names(df.og)
df.og.pl <- subset(df.og, select= c("PID.OG", "ERQ_Reapp.OG", "ERQ_Supp.OG", "IUS_F2.OG")) %>%
distinct()
# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
lme4,
performance,
psych,
stargazer,
tidyverse)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_02/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df.og <- read.csv(file = paste0(WorkDir, "/data/Pilot/Deriv/df_subset.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","NA", "N/A"),
row.names = 1)
paste("Observations:", nrow(df.og))
paste("Unique Events:", nrow(unique(df.og[,c('PID.OG', 'Event')])))
paste("Average Number of Emotions Per Event:", round(nrow(df.og)/nrow(unique(df.og[,c('PID.OG', 'Event')])),2))
paste("Total Number of Participants:", nrow(distinct(subset(df.og, select = c("PID.OG")))))
paste("Total Number of Reappraisal Events:", nrow(distinct(subset(df.og, df.og$Strategy.OG == "Reappraisal" , select = c("Strategy.OG", "Event")))))
paste("Total Number of Distraction Events:", nrow(distinct(subset(df.og, df.og$Strategy.OG== "Distraction" ,select = c("Strategy.OG", "Event")))))
df.fu <- read.csv(file = paste0(Import, "df.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("", "NA", "N/A"),
row.names = 1)
df.fu.pl <- read.csv(file = paste0(Import, "df_personlevel.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","N/A", "NA", "NaN"),
row.names = 1)
df.fu <- subset(df.fu,
!is.na(df.fu$PID.FU))
df.fu.pl$group <- "Participants"
ggplot(data = df.fu.pl, aes(x = group, y = DERS.LimitAccess.FU)) +
theme_classic()+
labs(x ="") +
geom_jitter(aes(alpha=0.2, color = group),shape=16, position=position_jitter(0.2)) +
geom_violin(trim=F, alpha=0.5) +
ylab("DERS - Limited Access to ER Strategies Subscale") +
theme(legend.position="none") +
geom_boxplot(width=0.2, color="black", alpha=0.2)
df.og.pl <- subset(df.og, select= c("PID.OG", "ERQ_Reapp.OG", "ERQ_Supp.OG", "IUS_F2.OG")) %>%
distinct()
t.test(x=df.og.pl$ERQ_Reapp.OG, y = df.fu.pl$ERQ_Reapp.FU,alternative = "two.sided",paired = F, var.equal = F)
t.test(x=df.og.pl$ERQ_Supp.OG, y = df.fu.pl$ERQ_Supp.FU,alternative = "two.sided",paired = F,var.equal = F)
t.test(x=df.og.pl$IUS_F2.OG, y = df.fu.pl$IUS.FU,alternative = "two.sided",paired = F,var.equal = F)
df.fu$Strategy.FU <- as.factor(df.fu$Strategy.FU) %>%
relevel(ref = "Reappraisal")
df.fu$Age <- as.numeric(df.fu$Age)
df.fu$Gender.Identity <- as.factor(df.fu$Gender.Identity)
df.fu$IUS_F2.FU <- as.numeric(df.fu$IUS_F2.FU)
df.fu$Accurate <- as.numeric(df.fu$Accurate)
df.fu$DERS.LimitAccess.FU <- as.numeric(df.fu$DERS.LimitAccess.FU)
df.fu <- subset(df.fu, !is.na(df.fu$Strategy.FU) &
!is.na(df.fu$Age) &
!is.na(df.fu$Gender.Identity) &
!is.na(df.fu$IUS_F2.FU))
m0 <- glmer(Strategy.FU ~ 1 + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
icc(m0)
m1 <- glmer(Strategy.FU ~ Emo.Extent.z + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m2 <- glmer(Strategy.FU ~ Emo.Extent.z + Age + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m3 <- glmer(Strategy.FU ~ Emo.Extent.z + Gender.Identity + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m4 <- glmer(Strategy.FU ~ Emo.Extent.z + IUS_F2.FU + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m5 <- glmer(Strategy.FU ~ Emo.Extent.z + DERS.LimitAccess.FU + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m6 <- glmer(Strategy.FU ~ Emo.Extent.z + Age + Gender.Identity + IUS_F2.FU + DERS.LimitAccess.FU + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
anova(m0, m1)
anova(m1, m2)
anova(m1, m3)
anova(m1, m4)
anova(m1, m5)
anova(m1, m6)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
class(m4) <- "lmerMod"
class(m5) <- "lmerMod"
class(m6) <- "lmerMod"
stargazer(m0,m1,m2, m3,m4,m5, m6,
type = "text",
title= "Intensity Predicting Regulation",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3", "Model 4", "Model 5", "Model 6"),
dep.var.labels = "Strategy Selection",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Age",
"Gender, Male",
"Gender, Non-Binary",
"IUS, Factor 2",
"DERS Limited Access to Strategies",
"Intercept"), ci = T,
notes = "")
exp(fixef(m1))
exp(0.017)
exp(0.091)
m1.e <- effect("Emo.Extent.z",m1,xlevels=list(Emo.Extent.z=seq(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2],
0.01)))
m1.e <-as.data.frame(m1.e)
head(m1.e)
plot <- ggplot(m1.e, aes(x=Emo.Extent.z, y=fit)) +
geom_jitter(data = df.fu, aes(x=Emo.Extent.z, y=Strategy.FU_num,
color=as.factor(Strategy.FU_num)),
width = 0.25, height = 0.035, size = 1, alpha = 0.10) +
geom_line(color = "Black", size = 4.5) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha = 0.15) +
scale_x_continuous("Emotion Intensity (z)", breaks = round(seq(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2],
(range(df.fu$Emo.Extent.z)[2] - range(df.fu$Emo.Extent.z)[1])/6),0)) +
scale_y_continuous("Probability of Choosing Distraction", breaks = seq(0,1,0.20)) +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
coord_cartesian(xlim = c(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2]), ylim = c(0,1)) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black")) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
plot
tiff(paste0(Plots, "Fig8.tiff"),
res = 300,
units = "in",
width = 6,
height = 4.5)
plot
dev.off()
rm(plot, m0, m1, m2, m3, m1.e)
m0 <- glmer(Strategy.FU ~ 1 + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m1 <- glmer(Strategy.FU ~ Emo.Extent.z + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
exp(fixef(m1))
exp(0.017)
exp(0.091)
m1.e <- effect("Emo.Extent.z",m1,xlevels=list(Emo.Extent.z=seq(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2],
0.01)))
m1.e <-as.data.frame(m1.e)
head(m1.e)
plot <- ggplot(m1.e, aes(x=Emo.Extent.z, y=fit)) +
geom_jitter(data = df.fu, aes(x=Emo.Extent.z, y=Strategy.FU_num,
color=as.factor(Strategy.FU_num)),
width = 0.25, height = 0.035, size = 1, alpha = 0.10) +
geom_line(color = "Black", size = 4.5) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha = 0.15) +
scale_x_continuous("Emotion Intensity (z)", breaks = round(seq(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2],
(range(df.fu$Emo.Extent.z)[2] - range(df.fu$Emo.Extent.z)[1])/6),0)) +
scale_y_continuous("Probability of Choosing Distraction", breaks = seq(0,1,0.20)) +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
coord_cartesian(xlim = c(range(df.fu$Emo.Extent.z)[1],
range(df.fu$Emo.Extent.z)[2]), ylim = c(0,1)) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black")) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
plot
tiff(paste0(Plots, "Fig8.tiff"),
res = 300,
units = "in",
width = 9,
height = 7.75)
plot
plot
dev.off()
tiff(paste0(Plots, "Fig8.tiff"),
res = 300,
units = "in",
width = 9,
height = 7.75)
plot
dev.off()
tiff(paste0(Plots, "Fig8.tiff"),
res = 300,
units = "in",
width = 12,
height = 9)
plot
dev.off()
