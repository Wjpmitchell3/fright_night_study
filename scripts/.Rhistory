df$CogLoad_Post <- as.numeric(df$CogLoad_Post)
df$Intense.pmean.z <- as.numeric(df$Intense.pmean.z)
df <- subset(df, df$Reg == "Decrease" & !is.na(df$Distracted) & df$Valence <= 0.5)
paste("Number of Participants:", length(unique(df$PID)))
paste("Number of Events:", nrow(distinct(subset(df, select = c("PID", "Timing", "EventNum")))))
paste("Number of Immediate Events:", nrow(distinct(subset(df, df$Timing == "ImmReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Familiar Recall Events:", nrow(distinct(subset(df, df$Timing == "MemReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Novel Recall Events:", nrow(distinct(subset(df, df$Timing == "DelReg", select = c("PID", "Timing", "EventNum")))))
paste("Number of Distracted cases:", length(which(df$Distracted == 1)))
paste("Number of Reappraised cases:", length(which(df$Distracted == 0)))
aov(Intense.z ~ Timing, data = df) %>%
summary()
t.test(df$Intense.z[df$Timing == "ImmReg"],
df$Intense.z[df$Timing == "MemReg"],
alternative = "two.sided",
paired = F)
t.test(df$Intense.z[df$Timing == "ImmReg"],
df$Intense.z[df$Timing == "DelReg"],
alternative = "two.sided",
paired = F)
df$Timing <- factor(df$Timing, levels = c("ImmReg", "MemReg", "DelReg"))
ggplot(data = df, aes(x = Timing, y = Intense.z)) +
theme_classic()+
geom_jitter(aes(alpha=0.5, color=Timing),shape=16, position=position_jitter(0.2)) +
geom_violin(trim=T, alpha=0.25) +
labs(title = "Time Influenced Emotional Intensity",
subtitle = paste("Events reported immediately after exposure were more intense than novel events recalled one week later, and the same events reacalled one week later.\n No differences were observed between novel and familiar recalled events."),
x = NULL,
y ="Emotion Intensity") +
scale_y_continuous(breaks = c(-2:2)) +
coord_cartesian(ylim=c(-2.25,2.25)) +
theme(legend.position="none") +
geom_boxplot(width=0.2, color="black", alpha=0.0) +
theme(plot.title = element_text(face="bold", size=8, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 6, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 10, color = "Black", angle=-45, vjust = 1, hjust = 0.0)) +
theme(axis.text.y = element_text(size = 12, color = "Black"))
t.test(df$Intense.z[df$Timing == "MemReg"],
df$Intense.z[df$Timing == "DelReg"],
alternative = "two.sided",
paired = F)
chisq.test(x = df$Timing, y= df$Distracted_cat)
ggplot(data = df, aes(x = Timing, color = Distracted_cat, fill = Distracted_cat)) +
geom_bar() +
scale_x_discrete("Timepoint", breaks = c("Immediate Recall", "Familiar Recall", "Novel Recall")) +
scale_y_continuous(breaks = c(0,100,200)) +
labs(title = "Frequency of Strategy Usage by Time Reported",
subtitle = "Strategies were reported equally as frequently across timepoints",
x = NULL,
y ="Frequency") +
scale_color_brewer(palette = "Dark2") +
scale_fill_brewer(palette = "Set2") +
coord_cartesian(ylim=c(0.0, 200.0)) +
theme_classic() +
theme(plot.title = element_text(face="bold", size=8, hjust = 0.5)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0.5, face = "italic")) +
theme(plot.caption = element_text(size = 8, hjust = 0.0, face = "italic")) +
theme(axis.title = element_text(size = 10)) +
theme(axis.text.x = element_text(size = 14, color = "Black")) +
theme(axis.text.y = element_text(size = 12, color = "Black")) +
theme(legend.key.size = unit(0.5, 'cm')) +
theme(legend.title = element_text(size=8)) +
theme(legend.text = element_text(size=6))
df_mem <- subset(df, df$Timing == "MemReg", select = c("PID", "EventNum", "EmoMod", "Intense","Intense.z", "Valence", "Valence_z",
"Reg", "RegDesc", "RegSuccess", "RegSuccess.z", "EmoCat", "Distracted"))
df_imm <- subset(df, df$Timing == "ImmReg", select = c("PID", "EventNum","EmoMod", "Intense", "Intense.z", "Valence", "Valence_z",
"Reg", "RegDesc", "RegSuccess", "RegSuccess.z", "EmoCat", "Distracted"))
paste(df_mem$PID, df_mem$EventNum) %>%
unique() %>%
sort() %>%
length()
paste(df_imm$PID, df_imm$EventNum) %>%
unique() %>%
sort() %>%
length()
tracker = 0
for (j in unique(paste(df_mem$PID, df_mem$EventNum))){
if (!any(paste(df_imm$PID, df_imm$EventNum) == j)){
# print(j)
tracker = tracker + 1
}
}
paste("Number of Events Without Comparison:", tracker)
df_compare <- merge(x = df_mem,
y = df_imm,
by = c("PID", "EventNum", "EmoMod", "Valence_z"),
all = FALSE)
Events_recalled <- paste(df_compare$PID, df_compare$EventNum) %>%
unique() %>%
sort() %>%
length()
paste("Number of Recalled Events:", Events_recalled)
df_compare$PID %>%
unique() %>%
sort() %>%
length() %>%
paste("Number of Participants:", ., "| Percentage:", round(((./115)*100),2), "%")
t.test(x = df_compare$Intense.z.x,
y = df_compare$Intense.z.y,
alternative = "two.sided",
paired = T)
df_compare$Intense.z_absdiff <- abs(df_compare$Intense.z.y - df_compare$Intense.z.x)
t.test(x = df_compare$Intense.z_absdiff,
alternative = "two.sided",
mu = 0)
df_compare$Congruent <- 0
df_compare$Congruent[df_compare$Distracted.x == df_compare$Distracted.y] <- 1
paste("Number of Congruent Observations:", sum(df_compare$Congruent), "| Percentage:", round(((sum(df_compare$Congruent)/nrow(df_compare))*100),2), "%")
df_compare <- merge(x = df_mem,
y = df_imm,
by = c("PID", "EventNum", "EmoMod", "Valence_z"),
all = TRUE)
Events_total <- paste(df_compare$PID, df_compare$EventNum) %>%
unique() %>%
sort() %>%
length()
paste("Number of Total Events:", Events_total)
((Events_recalled / Events_total) * 100) %>%
round(2) %>%
paste("Percent Events With An Emotion Recalled:", .,"%")
df_compare <- merge(x = df_mem,
y = df_imm,
by = c("PID", "EventNum", "EmoCat"),
all = FALSE)
Events_recalled <- paste(df_compare$PID, df_compare$EventNum) %>%
unique() %>%
sort() %>%
length()
paste("Number of Recalled Events:", Events_recalled)
df_compare$PID%>%
unique() %>%
sort() %>%
length() %>%
paste("Number of Participants:", ., "| Percentage:", round(((./115)*100),2), "%")
t.test(x = df_compare$Intense.z.x,
y = df_compare$Intense.z.y,
alternative = "two.sided",
paired = T)
df_compare$Intense.z_absdiff <- abs(df_compare$Intense.z.y - df_compare$Intense.z.x)
t.test(x = df_compare$Intense.z_absdiff,
alternative = "two.sided",
mu = 0)
df_compare$Congruent <- 0
df_compare$Congruent[df_compare$Distracted.x == df_compare$Distracted.y] <- 1
paste("Number of Congruent Observations:", sum(df_compare$Congruent), "| Percentage:", round(((sum(df_compare$Congruent)/nrow(df_compare))*100),2), "%")
((Events_recalled / Events_total) * 100) %>%
round(2) %>%
paste("Percent Events With An Emotion Recalled:", .,"%")
rm(j,df_compare,Events_recalled,df_imm, df_mem, tracker, Events_total)
df_pl <- data.frame("PID" = unique(df$PID),
"PropDist" = NA)
df_pl <- subset(df,
!is.na(df$HH.Enjoy) ,
select = c("PID", names(df)[grep(names(df), pattern = "Motive")],
"Pos.Anticipate", "Neg.Anticipate", "CogLoad_Post",
"Fear.Before", "Fear.During", "Intense.pmean.z", "Fear.Enjoy", "HH.Enjoy")) %>%
distinct() %>%
merge(x = df_pl,
y = .,
by = "PID",
all.x = F)
for (i in 1:nrow(df_pl)){
total <- nrow(subset(df, df$PID == df_pl$PID[i]))
dist <- nrow(subset(df, df$PID == df_pl$PID[i] & df$Distracted == 1))
if (total > 0) {
df_pl$PropDist[i] <- dist/total
}
}
rm(i, total, dist)
summary(lm(PropDist ~ CogLoad_Post, data = df_pl))
summary(lm(PropDist ~ Intense.pmean.z + CogLoad_Post, data = df_pl))
summary(lm(PropDist ~ Pos.Anticipate + Neg.Anticipate + Fear.Before, data = df_pl))
for (i in grep(names(df_pl), pattern = "Motive")){
df_pl[,i] <- as.numeric(df_pl[,i])
}
summary(lm(PropDist ~ Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored, data = df_pl))
summary(lm(PropDist ~ HH.Enjoy + Fear.Enjoy + Fear.During, data = df_pl))
summary(lm(PropDist ~ HH.Enjoy + Fear.Enjoy * Fear.During, data = df_pl))
m0 <- glmer(Distracted ~ 1 + (1 | PID), data = df, family = binomial)
m1 <- glmer(Distracted ~ Intense.z + (1 | PID), data = df, family = binomial)
m2 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + (1 | PID), data = df, family = binomial)
icc(m0)
anova(m0, m1)
anova(m0, m2)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
stargazer(m0,m1,m2,
type = "text",
title= "Affect Predicting Regulation Usage",
column.labels = c("Null Model", "Model 1", "Model 2"),
dep.var.labels = "Strategy Usage",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Affective Intensity (Person-Centered, z)", "Affective Intensity (Person-Mean)", "Intercept"),
ci = T,
notes = "")
exp(fixef(m1))
exp(-0.087)
exp(0.558)
m1.e <- effect("Intense.z",m1,xlevels=list(Intense.z=seq(range(df$Intense.z)[1],
range(df$Intense.z)[2],
0.01)))
m1.e <-as.data.frame(m1.e)
head(m1.e)
plot <- ggplot(m1.e, aes(x=Intense.z, y=fit)) +
geom_jitter(data = df, aes(x=Intense.z, y=Distracted,
color = as.factor(Distracted)),
width = 0.15, height = 0.025, size = 3.5) +
geom_line(color = "Black", size = 4.5) +
geom_ribbon(aes(ymin=lower, ymax=upper), alpha = 0.15) +
scale_x_continuous("Emotion Intensity (z)", breaks = round(seq(range(df$Intense.z)[1],
range(df$Intense.z)[2],
(range(df$Intense.z)[2] - range(df$Intense.z)[1])/6),0)) +
scale_y_continuous("Probability of Using Distraction", breaks = seq(0,1,0.20)) +
scale_color_manual(values = c("#F8766D", "#00BFC4")) +
coord_cartesian(xlim = c(range(df$Intense.z)[1],
range(df$Intense.z)[2]), ylim = c(0,1)) +
theme_classic() +
theme(legend.position = "none") +
theme(axis.title = element_text(size = 32, color = "Black")) +
theme(axis.text.x = element_text(size = 36, color = "Black")) +
theme(axis.text.y = element_text(size = 30, color = "Black"))
plot
tiff(paste0(Plots, "Fig5.tiff"),
res = 300,
units = "in",
width = 12,
height = 9)
plot
dev.off()
rm(plot, m0,m1,m2,m1.e)
m01 <- glmer(Distracted ~ Intense.z + Timing + (1 | PID), data = df, family = binomial)
m02 <- glmer(Distracted ~ Intense.z + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + (1 | PID), data = df, family = binomial)
m03 <- glmer(Distracted ~ Intense.z + CogLoad_Post + (1 | PID), data = df, family = binomial)
m04 <- glmer(Distracted ~ Intense.z + Startle + Fear.Enjoy + (1 | PID), data = df, family = binomial)
m05 <- glmer(Distracted ~ Intense.z + Pos.Anticipate + Neg.Anticipate + (1 | PID), data = df, family = binomial)
m06 <- glmer(Distracted ~ Intense.z + STAI_State + STAI_Trait + (1 | PID), data = df, family = binomial)
m07 <- glmer(Distracted ~ Intense.z + ERQ_CogReap + (1 | PID), data = df, family = binomial)
m08 <- glmer(Distracted ~ Intense.z + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
m09 <- glmer(Distracted ~ Intense.z + Timing + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + CogLoad_Post + Startle + Pos.Anticipate + Neg.Anticipate + Fear.Enjoy + STAI_State + STAI_Trait + ERQ_CogReap + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
stargazer(m01,m02,m03,m04,m05,m06,m07,m08,m09, type = "text")
m01 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Timing + (1 | PID), data = df, family = binomial)
m02 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + (1 | PID), data = df, family = binomial)
m03 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + CogLoad_Post + (1 | PID), data = df, family = binomial)
m04 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Startle + Fear.Enjoy + (1 | PID), data = df, family = binomial)
m05 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Pos.Anticipate + Neg.Anticipate + (1 | PID), data = df, family = binomial)
m06 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + STAI_State + STAI_Trait + (1 | PID), data = df, family = binomial)
m07 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + ERQ_CogReap + (1 | PID), data = df, family = binomial)
m08 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
m09 <- glmer(Distracted ~ Intense.pc.z + Intense.pmean.z + Timing + Motive.Payment + Motive.Thrill + Motive.Novelty + Motive.Challenge + Motive.Peers + Motive.Science + Motive.Bored + CogLoad_Post + Startle + Pos.Anticipate + Neg.Anticipate + Fear.Enjoy + STAI_State + STAI_Trait + ERQ_CogReap + Age + Gender + Education.Years + (1 | PID), data = df, family = binomial)
stargazer(m01,m02,m03,m04,m05,m06,m07,m08,m09, type = "text")
t.test(df$RegSuccess.z[df$Distracted == 1],
df$RegSuccess.z[df$Distracted == 0],
alternative = "two.sided",
paired = F)
m0 <- lmer(RegSuccess.z ~ 1 + (1 | PID), data = df, REML = F)
m1 <- lmer(RegSuccess.z ~ Intense.z + (1 | PID), data = df, REML = F)
m2 <- lmer(RegSuccess.z ~ Intense.z + Distracted_cat + (1 | PID), data = df, REML = F)
m3 <- lmer(RegSuccess.z ~ Intense.z * Distracted_cat + (1 | PID), data = df, REML = F)
icc(m0)
anova(m0, m1)
anova(m1, m2)
anova(m2, m3)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
stargazer(m0,m1,m2,m3,
type = "text",
title= "Affect & Strategy Predicting Regulation Success",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3"),
dep.var.labels = "Regulation Success",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Strategy, Reappraised", "Intensity * Strategy", "Intercept"),
ci = T,
notes = "")
interactions::sim_slopes(model = m3,
pred = Intense.z,
modx = Distracted_cat,
data = df,
confint = T)
df$fit <- fitted(m3)
plot <- ggplot(data = df, aes(x = Intense.z, y = fit, color = Distracted_cat)) +
stat_smooth(method="lm", se = T, alpha = .6, size = 4.5) +
scale_x_continuous(breaks = seq(-3,3,1)) +
scale_y_continuous(breaks = seq(-2,2,1)) +
scale_color_discrete(name = "Strategy", labels = c("Distraction", "Reappraisal")) +
labs(x = "Emotion Intensity (z)",
y ="Regulation Success (z)") +
coord_cartesian(xlim=c(-2.5, 2.5), ylim=c(-2, 2)) +
theme_classic() +
theme(legend.text = element_text(size = 24)) +
theme(legend.title = element_text(size = 24)) +
theme(legend.position = c(0.125, 0.125)) +
theme(axis.title = element_text(size = 32)) +
theme(axis.text.x = element_text(size = 36, color = "Black")) +
theme(axis.text.y = element_text(size = 36, color = "Black"))
plot
tiff(paste0(Plots, "Fig6.tiff"),
res = 300,
units = "in",
width = 12,
height = 9)
plot
dev.off()
rm(plot)
coef(m3)
fixef(m3)
se.fixef(m3)
ranef(m3)
plot_model(m3, type = "re")
plot_model(m3, type = "pred")
plot(m3)
df$AbsResSqr <- (abs(residuals(m3)))^2
LeveneTest <- lmer(AbsResSqr ~ Intense.z * Distracted_cat + (1 | PID), data=df, REML=F)
anova(LeveneTest)
qqmath(m2, id=0.05)
rm(LeveneTest)
rm(m0,m1,m2,m3)
summary(m3)
m0 <- lmer(RegSuccess.z ~ 1 + (1 | PID), data = df, REML = F)
m1 <- lmer(RegSuccess.z ~ Intense.z + (1 | PID), data = df, REML = F)
m2 <- lmer(RegSuccess.z ~ Intense.z + Distracted_cat + (1 | PID), data = df, REML = F)
m3 <- lmer(RegSuccess.z ~ Intense.z * Distracted_cat + (1 | PID), data = df, REML = F)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
stargazer(m0,m1,m2,m3,
type = "text",
title= "Affect & Strategy Predicting Regulation Success",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3"),
dep.var.labels = "Regulation Success",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Strategy, Reappraised", "Intensity * Strategy", "Intercept"),
ci = T,
notes = "")
summary(m3)
summary(m3)
class(m0) <- "lmerMod"
class(m1) <- "lmerMod"
class(m2) <- "lmerMod"
class(m3) <- "lmerMod"
stargazer(m0,m1,m2,m3,
type = "text",
title= "Affect & Strategy Predicting Regulation Success",
column.labels = c("Null Model", "Model 1", "Model 2", "Model 3"),
dep.var.labels = "Regulation Success",
star.cutoffs = c(0.05, 0.01,0.001),
covariate.labels = c("Affective Intensity (z)", "Strategy, Reappraised", "Intensity * Strategy", "Intercept"),
ci = T,
notes = "",p.auto = T)
m0 <- lmer(RegSuccess.z ~ 1 + (1 | PID), data = df, REML = F)
m1 <- lmer(RegSuccess.z ~ Intense.z + (1 | PID), data = df, REML = F)
m2 <- lmer(RegSuccess.z ~ Intense.z + Distracted_cat + (1 | PID), data = df, REML = F)
m3 <- lmer(RegSuccess.z ~ Intense.z * Distracted_cat + (1 | PID), data = df, REML = F)
summary(m3)
summary(m3)
anova(m3)
library(lmerTest)
summary(m3)
m0 <- lmer(RegSuccess.z ~ 1 + (1 | PID), data = df, REML = F)
m1 <- lmer(RegSuccess.z ~ Intense.z + (1 | PID), data = df, REML = F)
m2 <- lmer(RegSuccess.z ~ Intense.z + Distracted_cat + (1 | PID), data = df, REML = F)
m3 <- lmer(RegSuccess.z ~ Intense.z * Distracted_cat + (1 | PID), data = df, REML = F)
summary(m3)
summary(m3)
# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
lme4,
performance,
psych,
stargazer,
tidyverse)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_03/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df.og <- read.csv(file = paste0(WorkDir, "/data/Study_01/Derivative/df_subset.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","NA", "N/A"),
row.names = 1)
# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
lme4,
performance,
psych,
stargazer,
tidyverse)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_03/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df.og <- read.csv(file = paste0(WorkDir, "/data/Study_01/Derivative/df_subset.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","NA", "N/A"),
row.names = 1)
paste0(WorkDir, "/data/Study_01/Derivative/df_subset.csv")
# If the pacman package manager is not currently installed on this system, install it.
if (require("pacman") == FALSE){
install.packages("pacman")
}
# Loading in my packages with my pacman manager
pacman::p_load(effects,
here,
lme4,
performance,
psych,
stargazer,
tidyverse)
options(scipen=100)
options(digits=3)
options(tinytex.verbose = TRUE)
# Identifying our main directory
WorkDir <- here::here()
# Identifying specific directories to read and write from
Import <- paste0(WorkDir, "/data/Study_03/Raw/")
Plots <- paste0(WorkDir, "/plots/")
df.og <- read.csv(file = paste0(WorkDir, "/data/Study_01/Deriv/df_subset.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","NA", "N/A"),
row.names = 1)
paste("Observations:", nrow(df.og))
paste("Unique Events:", nrow(unique(df.og[,c('PID.OG', 'Event')])))
paste("Average Number of Emotions Per Event:", round(nrow(df.og)/nrow(unique(df.og[,c('PID.OG', 'Event')])),2))
paste("Total Number of Participants:", nrow(distinct(subset(df.og, select = c("PID.OG")))))
paste("Total Number of Reappraisal Events:", nrow(distinct(subset(df.og, df.og$Strategy.OG == "Reappraisal" , select = c("Strategy.OG", "Event")))))
paste("Total Number of Distraction Events:", nrow(distinct(subset(df.og, df.og$Strategy.OG== "Distraction" ,select = c("Strategy.OG", "Event")))))
df.fu <- read.csv(file = paste0(Import, "df.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("", "NA", "N/A"))
df.fu.pl <- read.csv(file = paste0(Import, "df_personlevel.csv"),
header = T,
sep=",",
stringsAsFactors = T,
na.strings=c("","N/A"),
row.names = 1)
df.fu <- subset(df.fu,
!is.na(df.fu$PID.FU))
df.fu.pl$group <- "Participants"
ggplot(data = df.fu.pl, aes(x = group, y = DERS.LimitAccess.FU)) +
theme_classic()+
labs(x ="") +
geom_jitter(aes(alpha=0.2, color = group),shape=16, position=position_jitter(0.2)) +
geom_violin(trim=F, alpha=0.5) +
ylab("DERS - Limited Access to ER Strategies Subscale") +
theme(legend.position="none") +
geom_boxplot(width=0.2, color="black", alpha=0.2)
df.og.pl <- subset(df.og, select= c("PID.OG", "ERQ_Reapp.OG", "ERQ_Supp.OG", "IUS_F2.OG")) %>%
distinct()
t.test(x=df.og.pl$ERQ_Reapp.OG, y = df.fu.pl$ERQ_Reapp.FU,alternative = "two.sided",paired = F, var.equal = F)
t.test(x=df.og.pl$ERQ_Supp.OG, y = df.fu.pl$ERQ_Supp.FU,alternative = "two.sided",paired = F,var.equal = F)
t.test(x=df.og.pl$IUS_F2.OG, y = df.fu.pl$IUS_F2.FU,alternative = "two.sided",paired = F,var.equal = F)
df.fu$Strategy.FU <- as.factor(df.fu$Strategy.FU) %>%
relevel(ref = "Reappraisal")
df.fu$Age <- as.numeric(df.fu$Age)
df.fu$Gender.Identity <- as.factor(df.fu$Gender.Identity)
df.fu$IUS_F2.FU <- as.numeric(df.fu$IUS_F2.FU)
df.fu$Accurate <- as.numeric(df.fu$Accurate)
df.fu$DERS.LimitAccess.FU <- as.numeric(df.fu$DERS.LimitAccess.FU)
df.fu <- subset(df.fu, !is.na(df.fu$Strategy.FU) &
!is.na(df.fu$Age) &
!is.na(df.fu$Gender.Identity) &
!is.na(df.fu$IUS_F2.FU))
m0 <- glmer(Strategy.FU ~ 1 + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
icc(m0)
m1 <- glmer(Strategy.FU ~ Emo.Extent.z + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m2 <- glmer(Strategy.FU ~ Emo.Extent.z + Age + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m3 <- glmer(Strategy.FU ~ Emo.Extent.z + Gender.Identity + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m4 <- glmer(Strategy.FU ~ Emo.Extent.z + IUS_F2.FU + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m5 <- glmer(Strategy.FU ~ Emo.Extent.z + DERS.LimitAccess.FU + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
m6 <- glmer(Strategy.FU ~ Emo.Extent.z + Age + Gender.Identity + IUS_F2.FU + DERS.LimitAccess.FU + (1 | PID.FU) + (1 | PID.OG), data = df.fu, family = binomial)
summary(m1)
df_temp <- df.fu %>%
.[,-which(names(.) %in% c("Emotion", "Emo.Extent", "Emo.Extent.z",
"Reg.Extent", "Reg.Extent.z"))] %>%
distinct()
m0 <- glmer(Strategy.FU ~ 1 + (1 | PID.FU) + (1 | PID.OG), data = df_temp, family = binomial)
icc(m0)
# Some of these models will fail to converge and that's okay. We won't even get to those later failed to converge models anyway.
m1 <- glmer(Strategy.FU ~ Emo_Mean.z + (1 | PID.FU) + (1 | PID.OG), data = df_temp, family = binomial)
summary(m1)
m1 <- glmer(Strategy.FU ~ Emo_Sum.z + (1 | PID.FU) + (1 | PID.OG), data = df_temp, family = binomial)
summary(m1)
